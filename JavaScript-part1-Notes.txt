1. intro to variables:
=====================
--> variables can store some information
--> we can use that information later
--> we can change that information later

"use strict";

// declare a variable 

var firstName = "Ranjeet";

// use a variable
console.log(firstName);

// change value

firstName = "John";

console.log(firstName);



2. rules for naming variables:
==================================

// you cannot start with number 
// example :- 
// 1value (invalid)
// value1 (valid)

var value1 = 2;
console.log(value1);

// you can use only undersore _ or dollar symbol 
// first_name (valid)
// _firstname (valid) 

// first$name (valid)
// $firstname (valid)

// you cannot use spaces 
// var first_name = "harshit"; // snake case writing 
// var firstName = "harshit"; // camel case writing 
// first name (invalid)

// convention 
// start with small letter and use camelCase



3. let keyword 
===============
// declare variable with let keyword 

let firstName = "harshit";
firstName = "Mohit";
console.log(firstName);


4. const keyword:
==================
// declare constants 

const pi = 3.14;
console.log(pi);


5. String indexing:
=====================

let firstName = "harshitdfjakldsfdf";

//  h    a   r   s   h   i   t 
//  0    1   2   3   4   5   6

// console.log(firstName[0]);
// length of string 
// firstName.length 

console.log(firstName.length);

console.log(firstName[firstName.length-2]);

// last Index : length - 1 


6. predefined function:
=========================
// trim() 
// toUpperCase()
// toLowerCase()
// slice()

let firstName = "   Ranjeet    ";

console.log(firstName.length);
let newName = firstName.trim(); // "Ranjeet"
console.log(newName);
console.log(newName.length);
newName = newName.toUpperCase();
console.log(newName);
newName = newName.toLowerCase();
console.log(newName);

// start index 
// end index

newString = newName.slice(0,4); // ranj
console.log(newString);



7. typeof operator
================ 

// data types (primitive data types)
// string "harhit"
// number 2, 4, 5.6 
// booleans 
// undefined
// null 
// BigInt
// Symbol

let age = 22; 
let firstName = "harshit";

console.log(typeof age);
console.log(typeof firstName);

// // 22 -> "22"
// // convert number to string. 
age = age + "";
console.log(typeof(age));  // string
console.log(age);  // "22"


// // convert string to number. 

let myStr = +"34";
console.log(typeof myStr);  // number

let abc = "18";
abc = Number(abc);
console.log(typeof abc);  //number



8. string concatenation:
========================== 

let firstName = "Ranjeet";
let lastName = "Kumar";

let fullName = firstName + " " + lastName;
console.log(fullName);

let string1 = "17";
let string2 = "10";

let newStr = string1 + string2;
console.log(newStr);
console.log(typeof newStr);

let newString = +string1 + +string2;
console.log(newString);
console.log(typeof newString);


9. template string 
=====================
let age = 22;
let firstName = "Ranjeet"

// "my name is harshit and my age is 22 "
// let aboutMe = "my name is " + firstName + " and my age is " + age; 

let aboutMe = `my name is ${firstName} and my age is ${age}`

console.log(aboutMe);


10. Datatype:
===============
// undefined 

let firstName;
console.log(typeof firstName);
firstName = "Ranjeet";
console.log(typeof firstName, firstName);

// null
let myVar = null;
console.log(myVar, typeof myVar);

myVar = "ranjeet";
console.log(myVar, typeof myVar);

// BigInt
let myNumber = BigInt(12);
let sameMyNumber = 123n;
console.log(myNumber);
console.log(Number.MAX_SAFE_INTEGER);
console.log(myNumber+ sameMyNumber);


11. booleans & comparison operator
====================================

// booleans 
// true, false 

let num1 = 5;
let num2 = 6;

console.log(num1 <= num2);

// == vs ===

num1 = "8";
num2 = 8;
console.log(num1 == num2);  // true
console.log(num1 === num2);  // false

// != vs !==

console.log(num1 != num2);  // false
console.log(num1 !== num2);  // true


13. truthy and falsy values 
===============================

// falsy values 


// false
// ""
// null 
// undefined
// 0


14. if else condition 
=======================

let age = 17;

if(age >= 18){
    console.log("User can play ddlc");
}
else{
    console.log("User can play mario");
}

let num = 14;
if(num % 2 === 0){
    console.log("even");
}
else{
    console.log("odd");
}



// falsy values 

// false
// ""
// null 
// undefined
// 0

let firstName = "";

if(firstName){
    console.log(firstName);
}
else{
    console.log("firstname is empty");
}


15. ternary operator
====================== 

let age = 15;
let drink;

if(age >= 5){
    drink = "coffee";
}
else{
    drink = "milk";
}
console.log(drink);

// ternary / conditional operator

drink = age >= 5 ? "coffee" : "milk";
console.log(drink);



16. AND  OR  operator
========================

// && - operator
let firstName = "Ranjeet";
let age = 22;
if(firstName[0] === "R" && age > 18){
    console.log("Name start with H and age is above 18");
}
else{
    console.log("Inside else");
}


// || - operator
firstName = "Ranjeet";
age = 12;
if(firstName[0] === "R" || age > 18){
    console.log("Inside if");
}
else{
    console.log("Inside else");
}



// nested if else
====================

// winning number 19 

// 19 your guess is right 
// 17 too low 
// 20 too high

let winningNumber = 19;
let userGuess = +prompt("Guess a number");  // prompt takes string as a input => + indicates number

if(userGuess === winningNumber){
    console.log("Your guess is right!!");
}
else{
    if(userGuess < winningNumber){
        console.log("Too low !!!");
    }
    else{
        console.log("too high !!!");
    }
}




// if 
// else if 
// else if 
// else if 
// else
======================

let tempInDegree = 15;

if(tempInDegree < 0){
    console.log("extremely cold outside");
}else if(tempInDegree < 16){
    console.log("It is cold outside");
}else if(tempInDegree < 25){
    console.log("wheather is okay");
}else if(tempInDegree < 35){
    console.log("lets go for swim");
}else if(tempInDegree < 45){
    console.log("turn on AC");
}else{
    console.log("too hot!!");
}

console.log("Hello");


// let tempInDegree = 4;

// if(tempInDegree > 40){
//     console.log("too hot");
// }else if(tempInDegree > 30){
//     console.log("lets go for swim");
// }else if(tempInDegree > 20){
//     console.log("weather is cool");
// }else if(tempInDegree > 10){
//     console.log("it is very cold outside");
// }else{
//     console.log("extremely cold");
// }

// console.log("hello");




// wsitch statement
==========================

// let day = 7;

// if(day === 0){
//     console.log("Sunday");
// }else if(day === 1){
//     console.log("Monday");
// }else if(day === 2){
//     console.log("Tuesday");
// }else if(day === 3){
//     console.log("Wednesday");
// }else if(day === 4){
//     console.log("Thrusday");
// }else if(day === 5){
//     console.log("Friday");
// }else if(day === 6){
//     console.log("Saturday");
// }else{
//     console.log("Invalid Day");
// }

let day = 2;

switch(day){
    case 0: console.log("Sunday");
            break;
    case 1: console.log("Monday");
            break;
    case 2: console.log("Tuesday");
            break;
    case 3: console.log("Wednesday");
            break;
    case 4: console.log("Thursday");
            break;
    case 5: console.log("Friday");
            break;
    case 6: console.log("Saturday");
            break;
    default: console.log("Invalid day");
}








// while loop
==================

//  print 0 to 9

let i = 0;

while(i <= 9){
    console.log(i);
    i++;
}
console.log(`current value of i is ${i}`);




// while loop example 
=========================
// sum of n natural number: 1+2+3+4+5+6+7

let num = 10;
let total = 0;
let i = 0;

while(i <= 10){
    total = total + i;
    i++;
}
console.log(total);



// for loop
==================
// print 0 to 9

for(let i = 0; i <= 9; i++){
    console.log(i);
}

// console.log("current value of i is ", i);  // i is not declared



// for loop example 
==========================
// sum of n number

let total = 0;
let num = 15;

for(let i = 1; i <= num; i++){
    total = total + i;
}
console.log(total);




break & continue:
============================
// break keywork

// continue keyword

for(let i = 0; i <= 10; i++){
    if(i===4){
        break;
    }
    console.log(i);
}

console.log("========================");

for(let i = 0; i <= 10; i++){
    if(i===4){
        continue;
    }
    console.log(i);
}




// do while loop
=========================

let i = 10;

do{
    console.log(i);
    i++;
}while(i<=9);






// intro to arrays 
// reference type 
// how to create arrays
==========================================================

// ordered collection of items/elements

let numbers = [2,5,3,6,1];
console.log(numbers);
console.log(numbers[3]);

let mixed = [2,3,1,4, "banana", null, undefined];
console.log(mixed);


let fruits = ["apple", "mango", "grapes"];
console.log(fruits);
console.log(fruits[0]);
console.log(fruits[1]);

fruits[1] = "banana";
console.log(fruits);
console.log(typeof fruits);  // object
console.log(Array.isArray(fruits));  // check if the fruit is array or not



push, pop, shift, unshift:
========================================================

// array push pop 

// array shift unshift 

let fruits = ["apple", "mango", "grapes"];
console.log(fruits);

// push --> add element to the last
fruits.push("banana");
console.log(fruits);

// pop --> delete last element of an array
let poppedFruit = fruits.pop();
console.log(fruits);
console.log("popped fruit is", poppedFruit);

// unshift --> add elements in the beginning of the given
fruits.unshift("banana");
console.log(fruits);

// shift --> remove the first element from an array
let removedFruit = fruits.shift();
console.log(fruits);
console.log("removed fruit is", removedFruit);




// primitve vs reference data types
=================================================================

// primitive type --> it stored in stack
let num1 = 6;
let num2 = num1;
console.log("value of num1 is", num1);  // 6
console.log("value of num2 is", num2);  // 6
num1++;
console.log("after incrementing num1");
console.log("value of num1 is", num1);  // 7
console.log("value of num2 is", num2);  // 6

// reference type --> it stored in heap
// array
let array1 = ["item1", "item2"];
let array2 = array1;
console.log("array1:", array1);  // ["item1", "item2"]
console.log("array2:", array2);  // ["item1", "item2"]
array1.push("item3");
console.log("after pushing element to array1");
console.log("array1:", array1);  // ["item1", "item2", "item3"]
console.log("array2:", array2);  // ["item1", "item2", "item3"]





// how to clone array 
========================================

// how to concatenate two arrays

let array1 = ["item1", "item2"];
// let array2 = ["item1", "item2"];
// let array2 = array1.slice(0).concat(["item3", "item4"]);
// let array2 = [].concat(array1, ["item3", "item4"]);

// new way
// spread operator
let oneMoreArray = ["item5", "item6"];
let array2 = [...array1, "item3", "item4", ...oneMoreArray];

array1.push("item3");
console.log(array1===array2);
console.log(array1);
console.log(array2);



// for loop in array 
===============================

let fruits = ["apple", "mango", "banana", "grapes"];

console.log(fruits.length);
console.log(fruits[fruits.length-2]);

let fruits2 = [];
for(let i = 0; i <= fruits.length-1; i++){
    fruits2.push(fruits[i].toUpperCase);
}
console.log(fruits2);




// use const for creating array
================================================

// heap memory ["apple", "mango"]   0x11

const fruits = ["apple", "mango"];  // 0x11
fruits.push("banana");
console.log(fruits);



// while loop in array
===============================

const fruits = ["apple", "mango", "grapes"];
const fruits2 = [];
let i = 0;
while(i<fruits.length){
    fruits2.push(fruits[i].toUpperCase());
    i++;
}
console.log(fruits2);





// for of loop in array
==========================================================

const fruits = ["apple", "mango", "grapes"];
const fruits2 = [];

for(let fruit of fruits){
    fruits2.push(fruit.toUpperCase());
}
console.log(fruits2);  // ["APPLE", "MANGO", "GRAPES"]





// for in loop in array
=========================================================

const fruits = ["apple", "mango", "grapes"];
const fruits2 = [];

for(let index in fruits){
    fruits2.push(fruits[index].toUpperCase());
}
console.log(fruits2);  // ["APPLE", "MANGO", "GRAPES"]




// array destructuring
========================================================

const myArray = ["value1", "value2", "value3","value4"];
// let myvar1 = myArray[0];
// let myvar2 = myArray[1];
// console.log("value of myvar1", myvar1);
// console.log("value of myvar2", myvar2);

// destructuring
let [myvar1, myvar2, ...newArray] = myArray;
console.log("value of myvar1", myvar1);
console.log("value of myvar2", myvar2);
console.log(newArray);




// objects
===================================================
// arrays are good but not sufficient for real world data
// objects store key value pairs 
// objects don't have index

// how to create objects 

const person = {
    name: "Ranjeet", 
    age: 23, 
    color: "white",
    hobbies: ["badminton", "cricket", "music"]
};
console.log(person);

// how to access data from objects with dot notation
console.log(person.name);
console.log(person.age);
console.log(person.color);
console.log(person.hobbies);

// how to add key value par to objects with dot notation
person.gender = "male";
console.log(person);

console.log("========================");

// how to access data from objects with bracket notation
console.log(person["name"]);
console.log(person["age"]);
console.log(person["color"]);
console.log(person["hobbies"]);

// how to add key value par to objects with bracket notation
person["phone"] = 9060586833;
console.log(person);




// difference b/w dot and bracket notation
================================================

const key = "email";
const person = {
    name: "Ranjeet", 
    age: 23, 
    color: "white",
    "person hobbies": ["badminton", "cricket", "music"]
};
console.log(person["person hobbies"]);
person[key] = "ranjeet@gmail.com";
console.log(person);




// how to iterate object
============================================
const person = {
    name: "Ranjeet", 
    age: 23, 
    color: "white",
    hobbies: ["badminton", "cricket", "music"]
}

// for in loop

for(let key in person){
    // console.log(person[key]);
    console.log(`${key} : ${person[key]}`);
}

// object.keys
console.log(Object.keys(person));





// computed properties
=========================================

const key1 = "objkey1";
const key2 = "objkey2";

const value1 = "myvalue1";
const value2 = "myvalue2";

// const obj = {
//     objkey1 : "myvalue1",
//     objkey2 : "myvalue2"
// }

// const obj = {
//     [key1] : value1,
//     [key2] : value2
// }
// console.log(obj);

const obj = {};

obj[key1] = value1;
obj[key2] = value2;

console.log(obj);





// spread operator
==================================================

// spread operator in array
const arr1 = [1,2,3];
const arr2 = [6,5,7];

const newArr = [...arr1, ...arr2, 23, 45];
console.log(newArr);

const newArray = [..."abcd"];  // ["a","b","c","d"]
console.log(newArray);


// spread operator in objects
const obj1 = {
    key1 : "value1",
    key2 : "value2",
};
console.log(obj1);

const obj2 = {
    key3 : "value3",
    key4 : "value4",
};
console.log(obj2);

const newObject = {...obj1, ...obj2, key5: "value5"}
// const newObject = { ...["item1", "item2"] };
// const newObject = { ..."abcdefghijklmnopqrstuvwxyz" };
console.log(newObject);





// object destructuring
===========================================

const band = {
    bandName: "led zepplin",
    famousSong: "stairway to heaven",
    year: 1968,
    trendingSong: "kashmir"
};

// const name = band.bandName;
// const song = band.famousSong;
// console.log(name, song);

const {bandName, famousSong, ...restProperties} = band;
console.log(bandName);
console.log(famousSong);
console.log(restProperties);




// objects inside array 
===============================================
// very useful in real world applications

const users = [
    {userId: 1, firstName: "Ranjeet", gender: "male"},
    {userId: 2, firstName: "Rani", gender: "female"},
    {userId: 3, firstName: "Mohit", gender: "male"}
]

console.log(users);

for(let user of users){
    console.log(user);
    // console.log(user.firstName);






// nested destructuring
==============================================

const users = [
    {userId: 1, firstName: "Ranjeet", gender: "male"},
    {userId: 2, firstName: "Rani", gender: "female"},
    {userId: 3, firstName: "Mohit", gender: "male"}
]

// const [user1, user2, user3] = users;
// console.log(user1);

const [{firstName}, , {gender}] = users;
console.log(firstName);
console.log(gender);







// function
===================================================================================

function singHappyBirthday(){
    console.log("Happy birthday to you .................");
}
singHappyBirthday();


function twoPlusFour(){
    console.log(2+4);
}
twoPlusFour();


function returnA(){
    return 4+5;
}
const returnedVaue = returnA();
console.log(returnedVaue);


// function with parameter
function sumTwoValue(num1, num2){
    return num1+num2;
}
const returnedsum = sumTwoValue(5,8);
console.log(returnedsum);


// isEven
// output : true, false

function isEven(number){
    if(number % 2 === 0){
        return true;
    }else{
        return false;
    }
}
console.log(isEven(5));


// input : string
// output : firstCharacter

function firstChar(anyString){
    return anyString[0];
}
console.log(firstChar("abcd"));


// input : array, target (number)
// output : index of target if target present in array

function findTarget(array, target){
    for(let i = 0; i < array.length; i++){
        if(array[i] === target){
            return i;
        }
    }
    return -1;
}
const myArray = [1,2,8,98];
console.log(findTarget(myArray, 8));







// function expression
========================================================================================

// function singHappyBirthday(){
//     console.log("Happy birthday to you .................");
// }
// singHappyBirthday();

const singHappyBirthday = function(){
    console.log("Happy birthday to you .................");
}
singHappyBirthday();

// function twoPlusFour(){
//     console.log(2+4);
// }
// twoPlusFour();

const twoPlusFour = function(){
    console.log(2+4);
}
twoPlusFour();

// function returnA(){
//     return 4+5;
// }
// const returnedVaue = returnA();
// console.log(returnedVaue);

const returnA = function(){
    return 4+5;
}
const returnedVaue = returnA();
console.log(returnedVaue);


// function with parameter
// function sumTwoValue(num1, num2){
//     return num1+num2;
// }
// const returnedsum = sumTwoValue(5,8);
// console.log(returnedsum);

// function with parameter
const sumTwoValue = function(num1, num2){
    return num1+num2;
}
const returnedsum = sumTwoValue(5,8);
console.log(returnedsum);


// isEven
// output : true, false

// function isEven(number){
//     if(number % 2 === 0){
//         return true;
//     }else{
//         return false;
//     }
// }
// console.log(isEven(5));

// isEven
// output : true, false

const isEven = function(number){
    if(number % 2 === 0){
        return true;
    }else{
        return false;
    }
}
console.log(isEven(5));


// input : string
// output : firstCharacter

// function firstChar(anyString){
//     return anyString[0];
// }
// console.log(firstChar("abcd"));


// input : string
// output : firstCharacter
const firstChar = function(anyString){
    return anyString[0];
}
console.log(firstChar("abcd"));


// input : array, target (number)
// output : index of target if target present in array

// function findTarget(array, target){
//     for(let i = 0; i < array.length; i++){
//         if(array[i] === target){
//             return i;
//         }
//     }
//     return -1;
// }
// const myArray = [1,2,8,98];
// console.log(findTarget(myArray, 8));


// input : array, target (number)
// output : index of target if target present in array
const findTarget = function(array, target){
    for(let i = 0; i < array.length; i++){
        if(array[i] === target){
            return i;
        }
    }
    return -1;
}
const myArray = [1,2,8,98];
console.log(findTarget(myArray, 8));






// arrow functions
=========================================================================================


// const singHappyBirthday = function(){
//     console.log("Happy birthday to you .................");
// }
// singHappyBirthday();

const singHappyBirthday = () => {
    console.log("Happy birthday to you .................");
}
singHappyBirthday();


const twoPlusFour = () => {
    console.log(2+4);
}
twoPlusFour();


const returnA = () => {
    return 4+5;
}
const returnedVaue = returnA();
console.log(returnedVaue);



// function with parameter
const sumTwoValue = (num1, num2) => {
    return num1+num2;
}
const returnedsum = sumTwoValue(5,8);
console.log(returnedsum);



// isEven
// output : true, false

const isEven = (number) => {
    if(number % 2 === 0){
        return true;
    }else{
        return false;
    }
}
console.log(isEven(6));

// const isEven = number => number % 2 === 0;



// input : string
// output : firstCharacter
const firstChar = (anyString) => {
    return anyString[0];
}
console.log(firstChar("abcd"));



// input : array, target (number)
// output : index of target if target present in array
const findTarget = (array, target) => {
    for(let i = 0; i < array.length; i++){
        if(array[i] === target){
            return i;
        }
    }
    return -1;
}
const myArray = [1,2,8,98];
console.log(findTarget(myArray, 8));






// Hoisting
========================================

// hoisting : hoisting is the default behavior of moving all the declarations at the top of the scope before code execution
// hoisting : hoisting allows you to use functions and variable before they are declared.

hello();

function hello(){
    console.log("Hello world");
}






// function inside function
=============================================================

const app = () => {
    const myFunc = () => {
        console.log("hello from myFunc");
    }

    const addTwo = (num1, num2) => {
        return num1 + num2;
    }

    const mul = (num1, num2) => num1 * num2;

    console.log("inside app");
    myFunc();
    console.log(addTwo(2,3));
    console.log(mul(2,3));
}
app();





// lexical scope 
=======================================================================

// lexical scope is the ability for a function scope to access variables from the parent scope

const myVar = "value1";

function myApp(){
    // const myVar = "value2";
    function myFunc(){
        // const myVar = "value59";
        const myFunc2 = () => {
            console.log("inside myFunc", myVar);
        }
        myFunc2();
    }
    
    console.log(myVar);
    myFunc();
}
myApp();






// block scope vs function scope 
==================================================================


// let and const are block scope
// var is function scope 

{
    let firstName = "Ranjeet";
    console.log(firstName);
}

{
    let firstName = "Mohit";
}
// console.log(firstName); // error

let firstName = "Rana";
console.log(firstName);


{
    var name = "manoj";
}
console.log(name);


function myApp(){
    if(true){
        let name1 = "mohan";
        console.log(name1);
    }
    // console.log(name1);  // error
}
myApp();






// default parameter
================================================================

// function addTwo(a,b){
//     return a+b;
// }
// const ans = addTwo(3,4);
// console.log(ans);


// function addTwo(a,b){
//     if(typeof b === "undefined"){
//         b = 0;
//     }
//     return a+b;
// }


function addTwo(a,b=0){
    return a+b;
}
const ans = addTwo(4,8);  // 12
const ans1 = addTwo(4);  // 4
console.log(ans);
console.log(ans1);






// rest parameters
===========================================================

function myFunc(a,b, ...c){
    console.log(`a is ${a}`);
    console.log(`b is ${b}`);
    console.log(`c is ${c}`);
    console.log(`c is`,c);
}

myFunc(3,4,5,6,7,8,9);


function addAll(...numbers){
    let total = 0;
    for(let number of numbers){
        total = total + number;
    }
    return total;
}

const ans = addAll(1,2,3,4,5,6);
console.log(ans);





// param destructuring
==========================================================

// object
// react

const person = {
    firstName: "Ranjeet",
    gender: "male",
    age: 23
}

// function printDetails(obj){
//     console.log(obj.firstName);
//     console.log(obj.gender);
// }

// printDetails(person);


function printDetails({firstName, gender}){
    console.log(firstName);
    console.log(gender);
}

printDetails(person);






// callback functions
====================================================================================

// callback function is a function passed into another function as an argument. and it will execute after the completion of main function.

function myFunc2(name){
    console.log("inside myFunc2");
    console.log(`your name is ${name}`);
}

function myFunc(callback){
    console.log("hello there I am a func");
    callback("ranjeet");
}

myFunc(myFunc2);






// function returning function
===============================================

function myFunc(){
    function hello(){
        return "hello world";
    }
    return hello;
}

const ans = myFunc();
console.log(ans());





// important array methods : forEach
===========================================================================================
// forEach method:  is a iterative method. It call a provided callbackFn function once for each element in an array.

const numbers = [4,2,5,8];

// function myFunc(num, index){
//     console.log(`index is ${index} number is ${num}`);
// }

// for(let i = 0; i < numbers.length; i++){
//     myFunc(numbers[i], i);
// }

numbers.forEach(function(number, index){
    console.log(`index is ${index} number is ${number}`);
});

numbers.forEach(function(number){
    console.log(number*2);
});


const users = [
    {firstName: "Raju", age: 24},
    {firstName: "Rohit", age: 34},
    {firstName: "Ramesh", age: 25},
    {firstName: "Rajesh", age: 26}
]

// users.forEach(function(user){
//     console.log(user.firstName);
// });

users.forEach((user) => {
    console.log(user.firstName);
});

// for(let user of users){
//     console.log(user.firstName);
// }






// map method
==================================================================

// the map() method create a new array with the result of calling a provided function on each element present in the calling array. 

const numbers = [3,4,6,1,8];

// const square = function(number){
//     return number * number;
// }

// const squareNumber = numbers.map(square);
// console.log(squareNumber);


const squareNumber = numbers.map((Number) => {
    return Number * Number;
});
console.log(squareNumber);


const users = [
    {firstName: "Raju", age: 24},
    {firstName: "Rohit", age: 34},
    {firstName: "Ramesh", age: 25},
    {firstName: "Rajesh", age: 26}
]

const userNames = users.map((user) => {
    return user.firstName;
})

console.log(userNames);





// filter method
============================================================================

// filter() method is used to create new array from given array that pass the test condition.

const numbers = [1,3,2,6,4,8];

// const isEven = function(number){
//     return number%2===0;
// }

// const evenNumber = numbers.filter(isEven);
// console.log(evenNumber);

const evenNumber = numbers.filter((number) => {
    return number%2===0;
});
console.log(evenNumber);


const words = ["spray", "limit", "elite", "execution", "destruction", "present"];

const result = words.filter((word) => {
    return word.length > 6;
});

console.log(result);






// reduce method
==========================================================================================

// reduce() method execute a reducer function over all elements in the array. It returns a single value.


const numbers = [1,2,3,4,5,10];

// aim: sum of all the numbers in array

const sum = numbers.reduce((accumulator, currentValue) => {
    return accumulator + currentValue;
});

console.log(sum);

// accumulator,  currentValue,  return
//  1               2             3
//  3               3             6
//  6               4             10
//  10              5             15
//  15              10            25


const userCart = [
    {productId: 1, productName: "mobile", price: 12000},
    {productId: 2, productName: "laptop", price: 120000},
    {productId: 3, productName: "tv", price: 20000},
]

const totalAmount = userCart.reduce((totalPrice, currentProduct) => {
    return totalPrice + currentProduct.price;
}, 0)

console.log(totalAmount);

// totalPrice       currentPrice         return
//   0                 12000             12000
//   12000             120000            132000
//   132000            20000             152000






// sort method 
========================================================================================

// sort() method sorts the elements of an array in place and returns the reference to the same array, now sorted.
// sort() method overwrites the original array.

// ASCII TABLE 
//char : ascii value

// '0' to '9'
// 48  to  57

// ':' : 58
// ';' : 59
// '<' : 60
// '=' : 61
// '>' : 62
// '?' : 63
// '@' : 64


// 'A' to 'Z'
// 65  to 90


// '[' : 91
// '\' : 92
// ']' : 93
// '^' : 94
// '_' : 95
// '`' : 96



// 'a' to 'z'
// 97  to 122

// '{' : 123
// '|' : 124
// '}' : 125


// sort 

// 5, 9, 1200, 400, 3000
// 5, 9, 400, 1200, 3000  (expected)

const numbers = [5, 9, 1200, 400, 3000];
// "5", "9", "1200", "400", "3000"
// [53, 57, 49, 52, 51]      --> converted to ascii

numbers.sort();
console.log(numbers);  // [1200, 3000, 400, 5, 9]


const userNames = ['ranjeet', 'abcd', 'mohit', 'nitish', 'aabc', 'ABC', 'Harshit'];
userNames.sort();
console.log(userNames);  // ['ABC', 'Harshit', 'aabc', 'abcd', 'mohit', 'nitish', 'ranjeet']


const num = [4,8,3,5,12,9,2];
// num.sort((a,b) => {
//     return a-b;
// });
num.sort((a,b) => a-b);
console.log(num);


// price low to high & high to low
const products = [
    {productId: 1, produceName: "p1", price: 300 },
    {productId: 2, produceName: "p2", price: 3000 },
    {productId: 3, produceName: "p3", price: 200 },
    {productId: 4, produceName: "p4", price: 8000 },
    {productId: 5, produceName: "p5", price: 500 },
]
console.log(products);

// low to high
//  slice(0) --> it will copy the whole products into lowToHigh
const lowToHigh = products.slice(0).sort((a,b) => {          
    return a.price - b.price;
});
console.log(lowToHigh);

// low to high
//  slice(0) --> it will copy the whole products into lowToHigh
const highToLow = products.slice(0).sort((a,b) => {          
    return b.price - a.price;
});
console.log(highToLow);






// find method
====================================================================================

// find() method is used to return the value of the first element in the array that satisfies the provided condition.

const myArray = ["Hello", "cat", "dog", "lion"];

// function isLength(str){
//     return str.length === 3;
// }
// const ans = myArray.find(isLength);
// console.log(ans);

const ans = myArray.find((string) => {
    return string.length === 3;
});
console.log(ans);


const users = [
    {userId : 1, userName: "harshit"},
    {userId : 2, userName: "harsh"},
    {userId : 3, userName: "nitish"},
    {userId : 4, userName: "mohit"},
    {userId : 5, userName: "aaditya"},
];

// const myUser = users.find((user) => {
//     return user.userId===3;
// });
const myUser = users.find((user) => user.userId===3);
console.log(myUser);






// every method
=================================================================================

// every() method checks whether all the given elements in an array are satisfying the provided condition in the function.
// every() method returns true if the function returns true for all elements.

// check every elements in the array is  even
const numbers = [2,4,6,8,10];

const ans = numbers.every((number) => number%2===0);
console.log(ans);

// check every product < 30000
const userCart = [
    {productId: 1, productName: "mobile", price: 12000},
    {productId: 2, productName: "laptop", price: 22000},
    {productId: 3, productName: "tv", price: 35000},
]

const result = userCart.every((cartItem) => cartItem.price < 30000);
console.log(result);





// some method
=================================================================

// some() method checks atleast one elements in the array satisfies the condition.


const numbers = [3,5,11,9];

const ans = numbers.some((Number) => Number%2===0);
console.log(ans);


const userCart = [
    {productId: 1, productName: "mobile", price: 12000},
    {productId: 2, productName: "laptop", price: 22000},
    {productId: 3, productName: "tv", price: 35000},
    {productId: 4, productName: "macbook", price: 250000},
]
const result = userCart.some((cartItem) => cartItem.price > 200000);
console.log(result);





// fill method
==================================================================

// fill() method fills specified elements in an array with a value.
// fill() method overwrites the original array.

// value, startIndex, endIndex

const newArray = new Array(10).fill(0);
console.log(newArray);

const myArray = [1,2,3,4,5,6,7,8];
myArray.fill(0,2,5);
console.log(myArray);





// splice method
==================================================

// splice() method used to modify the original array by removing or adding its item.

// startIndex , deleteCount , insert

const myArray = ['item1','item2','item3'];

// delete
const deletedItem = myArray.splice(1, 1);
console.log(myArray);
console.log("deleted item", deletedItem);

// insert
myArray.splice(1, 0, "item5");
console.log(myArray);

// insert & delete together
const deletedEle = myArray.splice(1, 2, 'item10', 'item11');
console.log(myArray);
console.log("deleted element", deletedEle);





// iterables 
=====================================================

// jispe hum for of loop laga sakein
// string , array are iterable 

const firstName = "Harshit";
for(let char of firstName){
    console.log(char);
}

const items = ['item1', 'item2', 'item3'];
for(let item of items){
    console.log(item);
}

// array like object 
// jinke pas length property hoti hai 
// aur jiko hum index se access kar sakte hai
// example :- string 

const name = "harshit";
console.log(name.length);
console.log(name[2]);






// Sets (it is iterable)
========================================================================

// set ia collection of unique values of any datatype. each value can only occur once in a set.

// store data  
// sets also have its own methods
// No index-based access 
// Order is not guaranteed
// unique items only (no duplicates allowed)

const numbers = new Set([1,2,3,]);
console.log(numbers);

const items = ['item1', 'item2', 'item3'];

const nums = new Set();
nums.add(1);
nums.add(2);
nums.add(3);
nums.add(4);
nums.add(5);
nums.add(items);
nums.add(["items1", "item2"]);
console.log(nums);
if(nums.has(1)){
    console.log("1 is present");
}else{
    console.log("1 is not present");
}

for(let num of nums){
    console.log(num);
}

const myArray = [1,2,4,4,5,6,5,6];
const uniqueElements = new Set(myArray);
console.log(uniqueElements);

let length = 0;
for(let element of uniqueElements){
    length++;
}
console.log(length);






// Maps data structure
==========================================================================
// map is an iterable

// store data in ordered fashion

// store key value pair (like object)
// duplicate keys are not allowed like objects


// different between maps and objects

// objects can only have string or symbol
// as key 

// in maps you can use anything as key
// like array, number, string 

// object literal 
// key -> string 
// key -> symbol
// const person = {
//     firstName : "harshit",
//     age: 7,
//     1:"one"
// }
// // console.log(person.firstName);
// // console.log(person["firstName"]);
// // console.log(person[1]);
// for(let key in person){
//     console.log(typeof key);
// }

// key value pair
const person = new Map();
person.set('firstName', 'ranjeet');
person.set('age', 23);
person.set(1, 'one');
person.set([1,2,3], 'onetwothree');

console.log(person);
console.log(person.get('firstName'));
console.log(person.get('age'));
console.log(person.get(1));
console.log(person.keys());

for(let key of person.keys()){
    console.log(key, typeof key);
}

console.log("=============================");

for(let [key, value] of person){
    // console.log(key);
    console.log(key, value);
}


const person1 = {
    id: 1,
    firstname: "rana"
}
const person2 = {
    id: 1,
    firstname: "rana"
}

const userInfo = new Map();
userInfo.set(person1, {age: 8, gender: 'male'});
userInfo.set(person2, {age: 9, gender: 'female'});
console.log(userInfo);
console.log(person1.id); // 1
console.log(userInfo.get(person1)); // {age: 8, gender: 'male'}
console.log(userInfo.get(person1).gender); // male
console.log(userInfo.get(person2).gender); // female






// clone using Object.assign
================================================================

const obj = {
    key1: "value1",
    key2: "value2",
}

// const obj2 = obj;
// console.log(obj);  // {key1: 'value1', key2: 'value2'}
// console.log(obj2);  // {key1: 'value1', key2: 'value2'}

// obj.key3 = "value3";
// console.log(obj);  // {key1: 'value1', key2: 'value2', key3: 'value3'}
// console.log(obj2);  // {key1: 'value1', key2: 'value2', key3: 'value3'}

// const obj2 = {...obj};  // using spread operator
// obj.key3 = "value3";
// console.log(obj);  // {key1: 'value1', key2: 'value2', key3: 'value3'}
// console.log(obj2);  // {key1: 'value1', key2: 'value2'}


const obj2 = Object.assign({}, obj);
obj.key3 = "value3";
console.log(obj);  // {key1: 'value1', key2: 'value2', key3: 'value3'}
console.log(obj2);  // {key1: 'value1', key2: 'value2'}





// optional chaining
================================================================================

// optional chaining is used to access nested object properties, even if an intermediate property doesnot exist.

const user = {
    firstName: "harsh",
    // address: {houseNumber: '1234'}
}

console.log(user.firstName);  // harsh
console.log(user.address);  // undefined
// console.log(user.address.houseNumber);  // error
console.log(user?.address?.houseNumber);  // undefined





// methods
===================================================================================

// methods are actions that can be performed on objects
// function inside object

const person = {
    firstName: "harsh",
    age: 18,
    about: function(){
        console.log(`person name is ${this.firstName} and age is ${this.age}`);
    }
}
console.log(person.about);  // ƒ (){ console.log("person name is harsh and age is 18");}
person.about();  // person name is harsh and age is 18

console.log("===========================================");

function personInfo(){
    console.log(`The name of person is ${this.firstName} and age is ${this.age}`);
}

const person1 = {
    firstName: "Rajesh",
    age: 25,
    about: personInfo
}
const person2 = {
    firstName: "Sujeet",
    age: 23,
    about: personInfo
}
const person3 = {
    firstName: "Mohit",
    age: 27,
    about: personInfo
}
person1.about();
person2.about();
person3.about();





// this & window keyword
=======================================================================

// if we console this & window keyword the it will returns window object

// console.log(this);  // window object
// console.log(window);  // window object

"use strict"; // if we use "use strict"; before console, then this keyword returns undefined
function myFunc(){
    console.log(this);
}
myFunc();  // window object
// window.myFunc();  // window object






// call, apply, bind method
=============================================================================================

// call method: call() method is used to call a function contains this value and an argument provided individually.

// apply method: apply() method is used to call a function contains this value and an argument contains elements of an array.

// bind method: bind() method is used to create new function. When a function is called, it has its own this keyword set to provided value, with a given sequence of arguments.

// const user1 = {
//     firstName: "rahul",
//     age: 34,
//     about: function(){
//         console.log(`name is ${this.firstName} and age is ${this.age}`);
//     }
// }
// const user2 = {
//     firstName: "mohit",
//     age: 30
// }
// // access about method inside user2 object
// user1.about.call(user2);


// const user1 = {
//     firstName: "rahul",
//     age: 34,
//     about: function(hobby, favMusician){
//         console.log(`name is ${this.firstName} and age is ${this.age} and my hobby is ${hobby}, musician is ${favMusician}`);
//     }
// }
// const user2 = {
//     firstName: "mohit",
//     age: 30
// }
// // access about method inside user2 object
// user1.about.call(user2, "badminton", "arijit");


function about(hobby, favMusician){
    console.log(`name is ${this.firstName} and age is ${this.age} and my hobby is ${hobby}, musician is ${favMusician}`);
}

const user1 = {
    firstName: "rahul",
    age: 34
}
const user2 = {
    firstName: "mohit",
    age: 30
}
// access about method inside user2 object
about.call(user1, "badminton", "arijit");

// apply
about.apply(user1, ["cricket", "vishal"]);

// bind
const func = about.bind(user2, "guitar", "arman");
func();





// bind example
===============================================

const user = {
    firstName: "Raju",
    age: 22,
    about: function(){
        console.log(`name is ${this.firstName} and age is ${this.age}`);
    }
}

// user.about(); // name is Raju and age is 22

// don't do this mistake
// const myFunc = user.about;  // name is undefined and age is undefined
// myFunc();

const myFunc = user.about.bind(user); // name is Raju and age is 22
myFunc();




// arrow function and this
======================================================================

// this keyword doesnot work in arrow function
const user = {
    firstName: "manoj",
    age: 25,
    about: () => {
        console.log(this.firstName, this.age);  // undefined, undefined
    }
}
user.about();





// sort syntax
====================================================================

const user = {
    firstName: "Raju",
    age: 22,
    about(){
        console.log(`name is ${this.firstName} and age is ${this.age}`);
    }
}
user.about();  // name is Raju and age is 22





// create functions to create multiple objects
================================================================

// function (that function create object)
// 2.) add key value pair 
// 3.) object ko return krega 

function createUser(firstName, lastName, email, age, address){
    const user = {};
    user.firstName = firstName;
    user.lastName = lastName;
    user.email = email;
    user.age = age;
    user.address = address;
    user.about = function(){
        return `${this.firstName} is ${this.age} years old.`;
    };
    user.is18 =  function(){
        return this.age >= 18;
    }
    return user;
}

const user1 = createUser('raju', 'kumar', 'raju@gmail.com', 25, 'sitamarhi');
console.log(user1);
const is18 = user1.is18();
console.log(is18);
const about = user1.about();
console.log(about);






// create functions to create multiple objects
// store methods in different object
======================================================================================

// function (that function create object)
// 2.) add key value pair 
// 3.) object ko return krega 

const userMethods = {
    about : function(){
        return `${this.firstName} is ${this.age} years old.`;
    },
    is18 : function(){
        return this.age >= 18;
    }
}
function createUser(firstName, lastName, email, age, address){
    const user = {};
    user.firstName = firstName;
    user.lastName = lastName;
    user.email = email;
    user.age = age;
    user.address = address;
    user.about = userMethods.about;
    user.is18 = userMethods.is18;
    return user;
}

const user1 = createUser('harshit', 'vashsith', 'harshit@gmail.com', 9, "my address");
const user2 = createUser('harsh', 'vashsith', 'harshit@gmail.com', 19, "my address");
const user3 = createUser('mohit', 'vashsitha', 'harshit@gmail.com', 17, "my address");
console.log(user1.about());
console.log(user3.about());






// create functions to create multiple objects
// store methods in different object
// solution using object.create


// function (that function create object)
// 2.) add key value pair 
// 3.) object ko return krega 

const userMethods = {
    about : function(){
        return `${this.firstName} is ${this.age} years old.`;
    },
    is18 : function(){
        return this.age >= 18;
    },
    sing: function(){
        return "toon na na na la la";
    }
}
function createUser(firstName, lastName, email, age, address){
    const user = Object.create(userMethods);
    user.firstName = firstName;
    user.lastName = lastName;
    user.email = email;
    user.age = age;
    user.address = address;
    user.about = userMethods.about;
    user.is18 = userMethods.is18;
    user.sing = userMethods.sing;
    return user;
}

const user1 = createUser('harshit', 'vashsith', 'harshit@gmail.com', 9, "my address");
const user2 = createUser('harsh', 'vashsith', 'harshit@gmail.com', 19, "my address");
const user3 = createUser('mohit', 'vashsitha', 'harshit@gmail.com', 17, "my address");
console.log(user1);
console.log(user1.about());
console.log(user2.sing());

// output

// {firstName: 'harshit', lastName: 'vashsith', email: 'harshit@gmail.com', age: 9, address: 'my address', …}
// about: ƒ ()
// address: "my address"
// age: 9
// email: "harshit@gmail.com"
// firstName: "harshit"
// is18: ƒ ()
// lastName: "vashsith"
// sing: ƒ ()
// [[Prototype]]: Object
// harshit is 9 years old.
// toon na na na la la






// solution using object.create
===================================================

const obj1 = {
    key1: "value1",
    key2: "value2"
}

const obj4 = {
    key4: "value4",
}

console.log(obj1.key2);  // value2
console.log(obj4.key4);  // value4
console.log(obj4.key2);  // undefined
// want obj4.key2 to print value2 instead of undefined

// __proto__

// offical ecmascript documentation 

// [[prototype]]

// __proto__ , [[prototype]]


// prototype  

const obj2 = Object.create(obj1);  // {}  // one more way to create empty object

obj2.key3 = "value3";

console.log(obj2);
console.log(obj2.key1);  // value1

// this is happening
console.log(obj2.__proto__);
// output
// {key1: 'value1', key2: 'value2'}
// key1
// : 
// "value1"
// key2
// : 
// "value2"
// [[Prototype]]
// : 
// Object






// prototype
=======================================================================================

// prototype is an object

// prototype is an object that is associate with every functions and objects by default.
// where function's prototype property is accessible and modifiable and object's prototype property is not visible.
// every function includes prototype object by default.

function hello(){
    console.log("hello world");
}

const hlo = {name: "raj", age: 18};

// javascript function ===> function  + object

// console.log(hello.name);  // hello

// you can add your own properties 
// hello.myOwnProperty = "very unique value";
// console.log(hello.myOwnProperty);

// name property ---> tells function name;

// function provides more usefull properties.


// console.log(hello.prototype); // {}

// only functions provide the prototype property

if(hello.prototype){
    console.log("prototype is present in function");
}else{
    console.log("prototype is not present in function");
}    // output : prototype is present in function

if(hlo.prototype){
    console.log("prototype is present in object");
}else{
    console.log("prototype is not present in object");
}    // output : prototype is not present in object


hello.prototype.abc = "abc";
hello.prototype.xyz = "xyz";
hello.prototype.sing = function(){
    return "lalalla";
};
console.log(hello.prototype);
console.log(hello.prototype.sing());






// prototype example
==================================================================================

// const userMethods = {
//     about : function(){
//         return `${this.firstName} is ${this.age} years old.`;
//     },
//     is18 : function(){
//         return this.age >= 18;
//     },
//     sing: function(){
//         return "toon na na na la la";
//     }
// }

function createUser(firstName, lastName, email, age, address){
    const user = Object.create(createUser.prototype);
    user.firstName = firstName;
    user.lastName = lastName;
    user.email = email;
    user.age = age;
    user.address = address;
    // user.about = userMethods.about;
    // user.is18 = userMethods.is18;
    // user.sing = userMethods.sing;
    return user;
}

createUser.prototype.about = function(){
    return `${this.firstName} is ${this.age} years old.`;
};
createUser.prototype.is18 = function(){
    return this.age >= 18;
};
createUser.prototype.sing = function(){
    return "toon na na na la la";
}

console.log(createUser.prototype);

const user1 = createUser('harshit', 'vashsith', 'harshit@gmail.com', 9, "my address");
const user2 = createUser('harsh', 'vashsith', 'harshit@gmail.com', 19, "my address");
const user3 = createUser('mohit', 'vashsitha', 'harshit@gmail.com', 17, "my address");
console.log(user1);
console.log(user1.about());
console.log(user2.sing());
console.log(user2.is18());






// new keyword
=========================================================================

// __proto__ is a reference and prototype is an object

function createUser(firstName, age){
    this.firstName = firstName;
    this.age = age;
}
createUser.prototype.about = function(){
    console.log(this.firstName, this.age);
};

const user1 = new createUser("raja", 9);

console.log(user1);
user1.about();

// this refers to empty object : this --> {}

// new keyword
// 1. create empty object {}
// 2. return this (empty {})
// 3. automatically create relationship b/w __proto__ & prototype
// i.e Object.create(createUser.prototype)






// new keyword example
=================================================================

// this refers to empty object : this --> {}

// new keyword
// 1. create empty object {}
// 2. return this (empty {})
// 3. automatically create relationship b/w __proto_ /[[prototype]] & prototype
// i.e Object.create(createUser.prototype)

// constructor function
function CreateUser(firstName, lastName, email, age, address){
    // const user = Object.create(createUser.prototype);  // {}  // new keyword do this automaticaly
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.age = age;
    this.address = address;
}

CreateUser.prototype.about = function(){
    return `${this.firstName} is ${this.age} years old.`;
};
CreateUser.prototype.is18 = function(){
    return this.age >= 18;
};
CreateUser.prototype.sing = function(){
    return "toon na na na la la";
}

console.log(CreateUser.prototype);

const user1 = new CreateUser('harshit', 'vashsith', 'harshit@gmail.com', 9, "my address");
const user2 = new CreateUser('harsh', 'vashsith', 'harshit@gmail.com', 19, "my address");
const user3 = new CreateUser('mohit', 'vashsitha', 'harshit@gmail.com', 17, "my address");
console.log(user1);
console.log(user1.about());
console.log(user2.sing());
console.log(user2.is18());





// hasOwnProperty
=================================================================================

// hasOwnProperty() returns true if the specified property is a direct property of the object

function CreateUser(firstName, lastName, email, age, address){
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.age = age;
    this.address = address;
}

CreateUser.prototype.about = function(){
    return `${this.firstName} is ${this.age} years old.`;
};
CreateUser.prototype.is18 = function(){
    return this.age >= 18;
};
CreateUser.prototype.sing = function(){
    return "toon na na na la la";
}

// console.log(CreateUser.prototype);

const user1 = new CreateUser('harshit', 'vashsith', 'harshit@gmail.com', 9, "my address");
const user2 = new CreateUser('harsh', 'vashsith', 'harshit@gmail.com', 19, "my address");
const user3 = new CreateUser('mohit', 'vashsitha', 'harshit@gmail.com', 17, "my address");
// console.log(user1);
// console.log(user1.about());
// console.log(user2.sing());
// console.log(user2.is18());

for(let key in user1){
    // console.log(key);
    if(user1.hasOwnProperty(key)){
        console.log(key);
    }
}







// class
================================================================================

// class is basically a blueprint or template for creating objects.
// class method is created using class keyword.
// always add a constructor() method in the class.
// constructor execute automatically when a new object is created.
// constructor is used to initialize object properties.
// then add any number of methods


class CreateUser{
    constructor(firstName, lastName, email, age, address){
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.age = age;
        this.address = address;
    }
    about(){
        return `${this.firstName} is ${this.age} years old.`;
    }
    is18(){
        return this.age >= 18;
    }
    sing(){
        return "toon na na na la la";
    }
}

// object / instance
const user1 = new CreateUser('harshit', 'vashsith', 'harshit@gmail.com', 9, "my address");
const user2 = new CreateUser('harsh', 'vashsith', 'harshit@gmail.com', 19, "my address");
const user3 = new CreateUser('mohit', 'vashsitha', 'harshit@gmail.com', 17, "my address");
console.log(user1.firstName);
console.log(user2.is18());

console.log(Object.getPrototypeOf(user1));





// class practice and extends keyword
========================================================================================

class Animal{
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
    eat(){
        return `${this.name} is eating`;
    }
    isSuperCute(){
        return this.age <= 1;
    }
    isCute(){
        return true;
    }
}

const animal1 = new Animal("Tom", 2);
console.log(animal1);
console.log(animal1.eat());
console.log(animal1.isCute());
console.log(animal1.isSuperCute());


class Dog extends Animal{
    
}

// object / instance
const dog1 = new Dog("Tommy", 3);
console.log(dog1);
console.log(dog1.eat());
console.log(dog1.isCute());





// super keyword
=============================================================================

// super keyword is used to call the constructor of its parent class to access the parent's properties and methods

class Animal{
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
    eat(){
        return `${this.name} is eating`;
    }
    isSuperCute(){
        return this.age <= 1;
    }
    isCute(){
        return true;
    }
}

class Dog extends Animal{
    constructor(name, age, speed){
        super(name,age);
        this.speed = speed;
    }
    run(){
        return `${this.name} is running at ${this.speed}kmph`;
    }
}

// object / instance
const tommy = new Dog("Tommy", 5, 45);
console.log(tommy);
console.log(tommy.run());







// same method in subclass
=================================================================================

class Animal{
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
    eat(){
        return `${this.name} is eating`;
    }
    isSuperCute(){
        return this.age <= 1;
    }
    isCute(){
        return true;
    }
}

class Dog extends Animal{
    constructor(name, age, speed){
        super(name,age);
        this.speed = speed;
    }

    run(){
        return `${this.name} is running at ${this.speed}kmph`;
    }

    eat(){
        return `Modifird Eat : ${this.name} is eating`;
    }
}

// object / instance
const tommy = new Dog("Tommy", 5, 45);
console.log(tommy);
console.log(tommy.run());
console.log(tommy.eat());  // Modifird Eat : Tommy is eating

const animal1 = new Animal('sheru', 2);
console.log(animal1.eat());  // sheru is eating








// getter and setters
====================================================================================

// the getters and setters are the methods that are used to get or set the value for properties of an object.
// the getter methods are used to access the properties od an object.
// the setter methods are used to set/change the values of an object.

class Person{
    constructor(firstName, lastName, age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }
    get fullName(){
        return `${this.firstName} ${this.lastName}`;
    }
    set fullName(fullName){
        const [firstName, lastName] = fullName.split(" ");
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

const person1 = new Person("Ranjeet", "Kumar", 22);
console.log(person1);
console.log(person1.firstName);
console.log(person1.lastName);
// console.log(person1.fullName());
console.log(person1.fullName);

person1.fullName = "mohit sharma";
console.log(person1);







// static methods and properties
================================================================

class Person{
    constructor(firstName, lastName, age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }
    static classInfo(){
        return "this is person class";
    }
    static desc = "static property";
    get fullName(){
        return `${this.firstName} ${this.lastName}`;
    }
    set fullName(fullName){
        const [firstName, lastName] = fullName.split(" ");
        this.firstName = firstName;
        this.lastName = lastName;
    }
    eat(){
        return `${this.firstName} is eating`;
    }
    isSuperCute(){
        return this.age <= 1;
    }
    isCute(){
        return true;
    }
}

const person1 = new Person("Rahul","Sharma", 9);
// console.log(person1.eat());
console.log(Person.classInfo());
console.log(Person.desc);












